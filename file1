#include <SoftwareSerial.h>        
#define DEBUG true
SoftwareSerial esp8266(10,11);      
const int trigPin = 8;            
const int echoPin = 9;            
long duration;
int distance;
void setup()
{
  Serial.begin(115200);         // Setting the baudrate at 115200
  esp8266.begin(115200);        // Set the baudrate according to the esp's baudrate.
  pinMode(trigPin, OUTPUT);  
  pinMode(echoPin, INPUT);    
  sendData("AT+RST\r\n",2000,DEBUG);            // command to reset the module
  sendData("AT+CWMODE=2\r\n",1000,DEBUG);       // This will configure the mode as access point
  sendData("AT+CIFSR\r\n",1000,DEBUG);          // This command will get the ip address
  sendData("AT+CIPMUX=1\r\n",1000,DEBUG);       // This will configure the esp for multiple connections
  sendData("AT+CIPSERVER=1,80\r\n",1000,DEBUG); // This command will turn on the server on port 80
}
void loop()
{
digitalWrite(trigPin, LOW);  
delayMicroseconds(2);        
digitalWrite(trigPin, HIGH);  
delayMicroseconds(10);
digitalWrite(trigPin, LOW);  
duration = pulseIn(echoPin, HIGH);  // reading the echopin which will tell us that how much time the signal takes to come back

distance= duration*0.034/2;        
 
  if(esp8266.available())         // This command will that check if the esp is sending a message
  {    
    if(esp8266.find("+IPD,"))
    {
     delay(1000);
     int connectionId = esp8266.read()-48; /* We are subtracting 48 from the output because the read() function returns
                                            the ASCII decimal value and the first decimal number which is 0 starts at 48*/
     String webpage = "<h1>IOT Garbage Monitoring System</h1>";
       webpage += "<p><h2>";  
       if (distance<5)
       {
        webpage+= " Trash can is Full";
        }
        else if ((distance>10) && (distance<20))
       {
        //webpage+= " Trash-can is partially filled";
        if ((distance>10) && (distance<15))
        {
          webpage+= " Trash-can is filled more than 30%";
        }
        else
        {
          webpage+= " Trash-can is filled more than 50%";
        }
       }
        else{
          webpage+= " Trash can is Empty";
          }
       webpage += "</h2></p></body>";  
     String cipSend = "AT+CIPSEND=";
     cipSend += connectionId;
     cipSend += ",";
     cipSend +=webpage.length();
     cipSend +="\r\n";
     sendData(cipSend,1000,DEBUG);
     sendData(webpage,1000,DEBUG);    
     String closeCommand = "AT+CIPCLOSE=";
     closeCommand+=connectionId;
     closeCommand+="\r\n";
     sendData(closeCommand,3000,DEBUG);
    }
  }
}
String sendData(String command, const int timeout, boolean debug)
{
    String response = "";  
    esp8266.print(command);
    long int time = millis();
    while( (time+timeout) > millis())
    {
      while(esp8266.available())
      {
        char c = esp8266.read();
        response+=c;
      }  
    }
    if(debug)
    {
      Serial.print(response);
    }
    return response;
}
